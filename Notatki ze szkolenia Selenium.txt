WIFI pass: JRPTHBP9T

git username: szymonszewczyk321

cmder - emulator konsoli, pomocny do kontroli kodu
git - popularny bo ma rozproszony system kontroli wersji
git init - tworzenie repozytorium w bie¿¹cym folderze
git status - sprawdzenie czy jest jakis plik 
git add . - dodanie nowych plików 
git commit - komitowanie, uruchamia gimp editora, ¿eby wpisaæ komentarz komita
git commit -n  - komitowanie bez komentarza

GIMP: ma tryby pracy: insert - czyli wpisywanie tekstu i - ESC - skróty klawiszowe
	s - tryb pisania (insert)
	esc - tryb skrótów
	:wq - zapisanie i wyjœcie

gl - czyli git log z parametrami
set upstream - komenda oznaczaj¹ca brancha je¿eli tworzymy brancha to niekoniecznie musi byæ wypychany na serwer. 

HEAD - to co widzê w katalogu
origin/master - to co jest g³ówne na serwerze

bêd¹c na branchu: git merge master - mergowanie mastera do brancha

git reflog - lista komend która by³a robiona na repozytorium - mo¿na cofn¹æ siê x komend wstecz




Choæby przysz³o tysi¹c testerów i testowaliby tysi¹c lat - nie wyklikaliby wszystkich wad.


Resharper IDE - szuka referencji w paczkach nugetowych

Debug > Windows > Immediate Window  - pozwala na ¿ywo coœ dodaæ do programu, np.driver.Url odda atrybut url lub zmienna.GetHashCode() daje numer hash obiektu dziêki temu mo¿emy potwierdziæ czy odwo³ujemy siê do tego samego obiektu czy uleg³ ju¿ zmianie

Debug > Windows > Autos, locals, watch


ZOSTA£O JESZCZE
Continous Inegration przy u¿yciu narzêdzia Jenkins lub TeamCity.
Data Driven Testing.
Page Object Pattern.


Aplikacje do automatyzacji desktopowych:
Sikuli
Test completeq
Xamarin
dot net - Wine framework - opensource
AutoIt

Dodatki pomagaj¹ce 
Xpather - do chroma
Firepath - do fierfoxa

Tools:
w3schools xml xpath - tutoriale, porównanie ró¿nych wersji xpatha/xmla w ró¿nych przegl¹darkach



Continous integration - automatycze puszczanie testów

https://www.jetbrains.com/teamcity/ - narzêdzie do contious integration, pobieramy, ustawiamy port np.8080, darmowe do 20 konfiguracji.
http://localhost:8080
domain: NTBK0556
username: Administrator

xunit runner console - pobieramy paczke do projektu która leci tu
C:\autotestdotnet\IDE_WordPress\packages\xunit.runner.console.2.1.0\tools\xunit.console.exe
i uruchamiamy testy z ("IDE_WordPress.dll" to nazwa projektu w VS)
C:\autotestdotnet\IDE_WordPress\IDE_WordPress\bin\Debug\IDE_WordPress.dll
komend¹ do xunit.console.exe z parametrem IDE_WordPress.dll z uwzglêdnieniem wzglêdnych œcie¿ek, tzn: 
packages\xunit.runner.console.2.1.0\tools\xunit.console.exe IDE_WordPress\bin\Debug\IDE_WordPress.dll
któr¹ uruchamiamy z folderu C:\autotestdotnet\IDE_WordPress
mo¿emy to zast¹piæ plikiem txt z komend¹
packages\xunit.runner.console.2.1.0\tools\xunit.console.exe IDE_WordPress\bin\Debug\IDE_WordPress.dll
który zapisujemy jako test.cmd i mo¿emy uruchamiaæ z konsoli czy innej apki.

VCS Roots - version control system np.git

Instalujemy team city, tworzymy projekt, wskazujemy na repo, ew.branch w VCS advanced
Triggers - regu³y uruchamiaj¹ce testy












packages\xunit.runner.console.2.1.0\tools\xunit.console.exe IDE_WordPress\bin\Debug\IDE_WordPress.dll -trait "name=IDE_WordPress.exported_test_case_from_IDE.Logging"

'MyNamespace.MyClass.MyTestMethod'
IDE_WordPress.exported_test_case_from_IDE.Logging


















